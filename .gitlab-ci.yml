# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
include:
  - component: $CI_SERVER_FQDN/jelmore1674/ci-templates/build-docker@main
    inputs:
      stage: "deploy"
      job: "build-docker"

image: node:20

cache:
  key:
    files:
      - pnpm-lock.yaml
  paths:
    - dist
    - ".pnpm-store"
    - node_modules

stages:
  - build
  - test
  - changelog
  - deploy

build:
  stage: build
  before_script:
    - corepack enable
    - pnpm config set store-dir .pnpm-store
    - pnpm install --frozen-lockfile
  script:
    - pnpm lint
    - pnpm build
  rules:
    - changes:
        - src/*
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - dist
      - ".pnpm-store"
      - node_modules

test:
  stage: test
  needs:
    - build
  before_script:
    - corepack enable
    - pnpm config set store-dir .pnpm-store
  script:
    - pnpm test:coverage
  rules:
    - changes:
        - src/*
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - ".pnpm-store"
      - node_modules
  artifacts:
    paths:
      - coverage/
  coverage: '/All files\s+\|\s+\d+\.\d+\s+\|\s+\d+\.\d+\s+\|\s+\d+\.\d+\s+\|\s+(\d+\.\d+)\s+.*/'

changelog:
  stage: changelog
  before_script:
    # in order to commit we have to have a user set
    # this would also make it easy to distinct the CI-made commits
    - git config user.name "CI Pipeline"
    - git config user.email "cipipeline@gitlab.justinelmore.dev"
    - git remote rm ci_origin || true
    - git remote add ci_origin $CI_REPOSITORY_URL
    ## Setup project
    - corepack enable
    - pnpm config set store-dir .pnpm-store
    - pnpm install --frozen-lockfile
    - pnpm lint
    - pnpm build
    - npm i -g .
  script:
    # Build changelog
    - build-cl generate
    # Check if changelog is updated.
    # Commit to git
    - git add .
      # We can use `-o ci.skip`, but AFAIK it doesn't work for Merge Request pipelines, while having it inside the commit message works there as well
    - git commit -m "Generated Changelog [skip ci]" || true
    - git push ci_origin HEAD:$CI_COMMIT_REF_NAME
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"
      changes:
        - changelog/*.yml
        - changelog/*.toml
  cache:
    key:
      files:
        - pnpm-lock.yaml
    paths:
      - ".pnpm-store"
      - node_modules

publish-npm:
  stage: deploy
  variables:
    REGISTRY: "@jelmore1674:registry=https://${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/"
    TOKEN: "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}"
  before_script:
    - corepack enable
    - pnpm config set store-dir .pnpm-store
    - pnpm install --frozen-lockfile
    - pnpm build
    - npm i -g .
    - build-cl notes > release-notes.txt
    - export RELEASE_NOTES=$(cat release-notes.txt)
  script:
    - echo $REGISTRY > .npmrc
    - echo $TOKEN >> .npmrc
    - npm publish
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - when: never
  cache:
    paths:
      - dist
  artifacts:
    paths:
      - release-notes.txt
    expire_in: "5 mins"

build-docker:
  needs: # Add needs
    - publish-npm
  rules:
    - if: $CI_COMMIT_TAG && '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
  cache:
    paths:
      - dist

create-release:
  stage: deploy
  needs:
    - build-docker
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script: echo "Creating release $CI_COMMIT_TAG"
  release:
    tag_name: $CI_COMMIT_TAG
    description: "$(cat release-notes.txt)"
  rules:
    - if: $CI_COMMIT_TAG && '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
